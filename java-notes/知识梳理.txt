java基础：
    1、基本数据类型：byte（占1个字节，2^8-1=127）、short（2）、int（4）、long（8）、float（4）、double（8）、char（2，2^16-1=65535）、boolean（占1个字节，前7位是0）
    2、什么是自动拆装箱：java1.5后的一个新特性：java编译器在基本类型和对应的引用类型（这里指包装类）之间做一个转化。比如把int转化为Integer等等。反之为自动拆箱
    3、java语言的特点：封装、继承、多态
        封装：隐藏对象的属性和实现细节，对外提供公共的访问方式，以防止数据的随意访问和修改
        继承：通过扩展一个已有的类，并继承该类的属性和行为，来创建一个新的类
        多态：
            三个条件：
                (1) 满足继承关系
                (2) 父类引用变量指向子类对象
                (3) 子类重写父类的方法
            子类转换成父类时的规则:
                - 将一个父类的引用指向一个子类的对象，称为向上转型(upcastiog)，自动进行类型转换。
                - 父类的引用只能调用子类覆盖或从父类继承的方法，无法调用子类独有（特有）的方法。
            父类型向下转型（有点问题）：
                - 如果父类想要调用子类特有的方法就必须将一个指向子类对象的父类引用赋给一个子类的引用，称为向下转型，此时必须进行强制类型转换（用子类对象来接收一个指向子类对象的父类引用）
    4、接口与抽象类的区别：
        (1) 接口中所有方法隐含都是抽象的。而抽象类则可以同时包含抽象和非抽象的方法
        (2) 接口中声明的变量默认都是final，而抽象类可以包含非final的变量
        (3) 接口中成员函数默认都会public。抽象类的成员函数可以是private，protected或者public
        (4) 类可以不实现抽象类和接口声明中的所有方法，这种情况下，类也必须声明为抽象的
        (5) 其它理解：
                接口是对动作的抽象，抽象类是对根源的抽象。
                抽象类表示的是，对象是什么。接口表示的是，对象能做什么。
                男人，女人，这两个类，他们的抽象类是人。说明他们都是人。
                人可以吃东西，狗也可以吃东西，你可以把“吃东西”定义成一个接口，然后让实现类去实现它。
                一个类只能继承一个类(抽象类)(类没有多继承，正如人不可能同时是生物和非生物。
                一个类可以实现多个接口(吃饭接口、走路接口)
                1.接口是特殊的抽象类，接口中只能定义常量和抽象方法，而抽象方法没有此限制。
                2.接口定义方法，不能有方法体即不能自主实现方法，而抽象类定义抽象方法时可以实现部分方法（就有可能是个半成品，所以不能直接创建出实例）。
                3.抽象类和接口都不能直接创建对象，所以可以避免半成品的抽象类被创建为对象，造成程序出错。
                4.当你关注一个事物的本质的时候，用抽象类；当你关注一个操作的时候，用接口
                注意：
                    - 定义抽象类的代价较高，抽象里也必须编写出所有子类的所有共性。
                      而类又不能多继承，一个类若继承了一个抽象类，不能再继承别的类，也就不能再扩展其属性和方法，使用起来不灵活，设计难度较高。
                    - 对于接口，虽然在功能上会弱化许多，但是它只是针对动作的描述，而一个类可同时实现多个接口，这样扩展其功能属性显得尤为灵活，设计难度较低。
    5、什么时候用接口，什么时候用抽象类：
        如果是考虑一类事物或者一种事物的特征、行为，比如会飞的会跑的，一般定义成接口
        如果考虑的是一个事物，但是没有一个具体概念，比如交通工具定义为抽象类
    6、jdk与jre区别是什么？
        java开发工具包（jdk）是完整的java软件开发包，包含了jre，编译器和其他工具（比如：javadoc，java调试器），可以让开发者开发，编译，执行java应用程序
        java运行时环境（jre）是将要执行的java程序的java虚拟机，同时也包含了执行applet需要的浏览器插件。
    7、Object类中的相关方法
        (1) ==         ：比较两个变量是否指向同一个对象（比较引用）
        (2) equals()   ：比较两个对象的内容是否相等，需要用重写后的equals（若不重写则为 == ），equals一般是给用户来调用的，返回值是true/false
        (3) hashCode() ：计算出对象的特征值，返回值是int值，hashCode一般不是给用户直接调用的
        (4) equals() 与 hashCode()相关内容：
            * 一般来说重写了equals方法后也要重写hashCode方法，除非这个类不需要使用到类似HashMap、HashSet等集合来存放数据
            * 所有参与计算 hashCode() 返回值的关键属性，都应该用于作为 equals() 比较的标准（尽可能的使equals比较不相同时，hashCode也不相同）
            * equals相同那么hashCode可相同、可不同（hashCode不相同会导致使用到hash算法的集合会将两个相同元素放入不同的位置）
            * equals不相同那么hashCode一定不能相同（hashCode相同会导致使用到hash算法的集合会将元素存入同一个位置，影响查询效果）
            * equals相同hashCode值必须相同；equals不相同hashCode应尽量不相同；
            * equals不相同-------代表：不是同一个对象（“不是同一个人”）
            * 若很多对象它们的equals不相同但hashCode确相同，这会导致“一个屋子里有许多人”，大大降低检索效率（一个空间里本应只存一个keyValue对）
        (5) 重写equals()方法 和 hashCode()方法
                java建议子类重写equals，实现按照“业务逻辑”规则比较对象是否相等!
                class Card {
                    int suit; // 花色
                    int rank; // 点数
                    public Card (int suit, int rank) {
                        this.suit = suit;
                        this.rank = rank;
                    }
                    @Override
                    public boolean equals(Object obj) {
                        if (obj == null) { return false; }
                        if (this == obj) { return true; }
                        if (obj instanceof Card) {
                            Card card = (Card) obj;
                            // 实现了业务逻辑层面的相等
                            return this.suit==card.suit && this.rank==card.rank;
                        }
                        return false;
                    }
                    @Override
                    public int hashCode() {
                        return Objects.hash(suit, rank);
                    }
                }
        (15) equals 与 hashCode的重要性体现在什么地方？
            * HashMap是通过equals和hashCode确定键值对索引

    8、java集合类相关框架：
        Collections：操作集合的工具类
        Collection：
            List：
                介绍：有序可重复集（List extends Collection）
                实现类：
                    (1) ArrayList
                        介绍：规模动态变化的，可改变大小的数组
                        优点：底层数据结构是数组，查询快，增删慢
                        缺点：线程不安全，效率高
                    (2) Vector
                        优点：底层数据结构是数组，查询快，增删慢
                        缺点：线程安全，效率低
                    (3) LinkedList
                        介绍：可以通过修改链表的指针（这里指引用）来进行元素的增删
                        优点：底层数据结构是双向链表实现，查询慢，增删快
                        缺点：线程不安全，效率高
                    (4) ArrayList、Vector、LinkedList的异同点？
                        * ArrayList 和 Vector对比
                            - ArrayList是非线程安全的，Vector是线程安全的
                            - 扩容策略不一样：
                                ArrayList被第一次创建的时候，会有一个初始大小DEFAULT_CAPACITY=10; 随着元素的不断增加，当ArrayList认为容量不够的时候就会进行扩容，增长原来的50%。
                                Vector缺省情况下自动增长原来一倍的数组长度
                        * ArrayList 和 LinkedList对比
                            - ArrayList底层是数组，LinkedList底层是双向链表实现（它们的主要区别）
                            - ArrayList查询和修改元素的速度较快，LinkedList删除和增加元素较快
                            - 它们都是非线程安全的
            Set：
                介绍：
                    无序不可重复集（元素无放入顺序，元素不可重复，重复元素被会覆盖掉），元素虽然无放入顺序，但是元素在Set中的位置是由该元素的HashCode决定的，其位置其实是固定的。
                    加入Set的Object必须定义equals()方法，另外List支持for循环，也就是通过下标来遍历，也可以用迭代器，但是Set只能用迭代器，因为它是无序的，无法用下标来取得想要的值。
                实现类：
                    (1) HashSet
                            底层数据结构是哈希表（无序，唯一）
                            如何来保证元素唯一性？
                                * HashSet是通过equals()来判断两个元素是否相等并通过hashCode()来确定存储的空间：
                                  - 1、equals相等、hashCode相等     --- 相同元素（不能存入）
                                  - 2、equals不相等、hashCode不相等  --- 不同元素（完美存入）
                                  - 3、equals相等、hashCode不相等    --- 不同元素（可存入）
                                      那么这两个元素会被HashSet当作两个不同的元素存入HashSet中不同的位置，与设计HashSet的初衷不符（元素不重复）
                                  - 4、equals不相等、hashCode相等    --- 不同元素（可存入）
                                      (HashSet会将这两个元素保存在同一个位置，并将超过一个的元素以链表方式保存，这将影响HashSet的效率)
                                * 获取元素只能采用迭代器
                    (2) LinkedHashSet
                            底层数据结构是链表和哈希表（FIFO插入有序，唯一）
                                - 由链表保证元素有序
                                - 由哈希表保证元素唯一
                                - 根据HashCode的值来决定元素的存储位置
                    (3) TreeSet
                            底层数据结构是红黑树（有序，唯一）
                                <1> 如何保证元素排序的呢？
                                    - 自然排序
                                    - 比较器排序
                                <2> 如何保证元素唯一性的呢？
                                    - 根据比较的返回值是否是0来决定
                            TreeSet implements NavigableSet extends SoredSet extends Set
                    (4) HashSet、LinkedHashSet、TreeSet的异同点？
                        介绍：
                            HashSet：只是通用的存储数据的集合
                            LinkedHashSet：主要功能用于保证FIFO即有序的集合（先进先出）
                            TreeSet：主要功能用于排序
                        同：
                            Thread safety：
                                三者都不是线程安全的，如果要使用线程安全可以Collections.synchronizedSet()
                            Duplicates elements：
                                因为三者都实现Set，所以三者都不包含重复元素（元素唯一）
                        异：
                            Performance and Speed：
                                HashSet插入数据最快，其次LinkHashSet，最慢的是TreeSet
                                    原因：
                                        - HashSet总是比TreeSet性能好，因为HashSet不需要额维护元素的顺序
                                        - LinkedHashSet需要用额外的链表维护元素的插入顺序，因此在插入时性能比HashSet低，但在迭代访问（遍历）时性能更高。因为插入的时候即要计算hashCode又要维护链表，而遍历的时候只需要按链表来访问元素。
                            Ordering：
                                HashSet不保证有序；
                                LinkHashSet保证FIFO即按插入顺序排序；
                                TreeSet是内部实现排序，也可以自定义排序规则
                            null：
                                HashSet和LinkHashSet允许存在null数据，但是TreeSet中插入null数据时会报NullPointerException
                        比较：
                            将 "B", "E", "D", "C", "A" 依次 add进HashSet、LinkedHashSet、TreeSet
                            运行结果:
                                Ordering in HashSet : [A, B, C, D, E] (无顺序)
                                Order of element in LinkedHashSet : [B, E, D, C, A] (FIFO插入有序)
                                Order of objects in TreeSet : [A, B, C, D, E] (排序)
            Queue：
                介绍：
                实现类：
                    ConcurrentLinkedQueue
                    PriorityQueue
                子接口：
                    Deque：
                        介绍：
                            ([dek]: 双端队列) 即从队列的两端分别可以入队（offer）和出队（poll），LinkedList实现了该接口。
                            如果将Deque限制为只从一端入队和出队，则可实现“栈”（Stack）的数据结构，
                            对于栈而言，入栈称之为push，出栈称之为pop，遵循：先进后出原则。
                            对于操作需要有可追溯性，使用“栈”（如：文件浏览器的后退键、安卓手机的返回键）
                        实现类：
                            LinkedList
                        使用：
                            Deque<String> stack = new LinkedList<String>();
                            stack.push("a");
                            stack.push("b");
                            stack.push("c");
                            System.out.println(stack); // [c, b, a]
            其它：
                (1) 要唯一吗？
                        是：Set
                            有序吗？
                                LinkedHashSet 或 TreeSet
                            无序？
                                HashSet
                        如果你知道是Set，但是不知道是哪个Set，就用HashSet
                (2) 要安全吗？
                        是：Vector
                        否：ArrayList 或 LinkedList
                            查询多：ArrayList
                            增删多：LinkedList
                        如果你知道是List，但是不知道是哪个List，就用ArrayList
                (3) 如果你知道是Collection集合，但是不知道使用谁，就用ArrayList（这个要看情况啦）
        Map
            介绍：
                * Map接口定义的集合又称查找表（二维表格），用于存储 "Key - Value" 键值对。
                * Key可以看成是Value的索引，作为Key的对象在集合中不可以重复（即Key不可以重复）
                * 根据内部数据结构的不同，Map接口有多种实现类，其中常用的有内部为Hash表实现的HashMap和内部为排序二叉数实现的TreeMap
                * Map（查找表）：内容可以看作是一个多行两列的表格。
            注意：
                equals相同，hashCode值必须相同；
                equals不相同，hashCode应尽量不相同；
                    若很多对象它们的equals不相同但hashCode确相同，这会导致“一个屋子里有许多人”，大大降低检索效率
                        （一个空间里本应只存一个keyValue对，若存在多个，会大大降低了检索效率，因为每个keyValue都是以链表的形式存入对应的bucket，链表检索比数组检索要慢很多）
            使用：
                什么时候会用Map：通常我们保存一组数据，而每个数据需要有“说明”（标签）的时候，则可以使用Map
                    Key：保存“说明”
                    Value：保存数据
                具体：
                    QQ分组：
                        Key            Value
                        “我的好友”       List
                        “我的家人”       List
                          ...           ...
                常用方法：
                    1、put --> 用于向Map中插入元素
                        当给定的key已在Map中存在，则是替换Value的操作（key不会替换），则put方法的返回值为被替换的Value
                        若给定的key不在Map中，则put方法的返回值为null
                    2、get --> 获取map中Key对应的Value值
                    3、containsKey --> 查看map中是否包含给定的Key，返回值为：boolean
            实现类：
                (1) HashMap
                        原理：基于Hash表（也称哈希数组）实现
                        介绍：
                            1）无序
                            2）方法不是同步的（线程不安全的、效率高）
                            3）允许键或值为null
                            4）父类：AbstractMap
                        工作原理及注意事项：
                            1）获取key的hashCode值；
                            2）通过hash算法确定要存储到哪个空间（bucket）
                            3）通过hash算法确定要检索的空间（bucket）
                            4）通过equals方法依次和bucket中的key比较
                            5）元素（key-value形式）以链表的方式存入对应的bucket
                            6）鉴于HashMap的存储原理，存入HashMap的Key必须妥善的重写hashCode方法
                            7）当调用put方法时，HashMap会获取key的hashCode值并通过hash算法来确定要存储到的空间（bucket），再通过equals方法依次和bucket中的key比较（一般情况下bucket中只有一个元素），如果key的比较结果为true，则替换value（key不会替换），如果key的比较结果为false，则插入元素（多个元素之间是以链表形式连接）。
                            8）当调用get方法时，HashMap会获取key的hashCode值并通过hash算法来确定需要检索的空间（bucket），再通过equals方法依次和bucket中的key比较，如果key的比较结果为true，则返回key所对应的value值。
                        性能优化：
                            HashMap（散列表）会影响性能的几个因素（HashMap优化）：
                            1）容量：散列数组的大小，当我们new一个HashMap的时候，它内部会创建一个散列数组，其大小是16（DEFAULT_INITIAL_CAPACITY = 1 << 4，可设置，不建议改）
                            2）变量size：它记录HashMap的底层数组中已用槽的数量（多少组键值对）
                            3）加载因子（static final float DEFAULT_LOAD_FACTOR=0.75f，默认值是0.75，这个是根据科学的测试统计出来的一个比较平衡的值，一般情况不建议改）
                            4）变量threshold[ˈθreʃhəʊld]，它是HashMap的阈值，用于判断是否需要调整HashMap的容量（threshold = 容量 * 加载因子）
                                eg：
                                一个宾馆有16间房，若宾馆里只住1个人和宾馆里住满了人当然是只住1个人时的检索效率高。
                                HashMap经过反复的科学测试，最终统计出来当加载因子为0.75时，检索效率与资源消耗情况最合理最优。
                                若当size（put动作）> threshold时，散列数组就会扩容，就是永远保证至少有4分之一是空的。
                                若加载因子过大，对空间的利用更充分，但是查找效率会降低（链表长度会越来越长）。
                                若加载因子设置的过小，那就会频繁扩容会影响性能。
                                HashMap共有四个构造方法。构造方法中提到了两个很重要的参数：初始容量和加载因子。
                        详细介绍：
                            1）HashMap是基于哈希表实现的，每一个元素是一个key-value对，其内部通过单链表解决冲突问题，容量不足（超过了阀值）时，同样会自动增长。
                            2）HashMap是非线程安全的，只是用于单线程环境下，多线程环境下可以采用concurrent并发包下的ConcurrentHashMap。
                            3）HashMap 实现了Serializable接口，因此它支持序列化，实现了Cloneable接口，能被克隆。
                            4）HashMap存数据的过程是：
                                HashMap内部维护了一个存储数据的Entry数组，HashMap采用链表解决冲突，每一个Entry本质上是一个单向链表。
                                当准备添加一个key-value对时，首先通过hash(key)方法计算hash值，然后通过indexFor(hash,length)求该key-value对的存储位置，计算方法是先用hash&0x7FFFFFFF后，再对length取模，这就保证每一个key-value对都能存入HashMap中，当计算出的位置相同时，由于存入位置是一个链表，则把这个key-value对插入链表头。
                            5）HashMap中key和value都允许为null。key为null的键值对永远都放在以table[0]为头结点的链表中。
                        子类：LinkedHashMap
                            原理：底层维护了一个双向链表，它可以实现输入的顺序和输出的顺序相同
                            介绍：
                                LinkedHashMap维护着一个双向循环链表。此链表定义了迭代顺序，该迭代顺序通常就是存放元素的顺序。
                                LinkedHashMap的内部维持了一个双向链表，保存了数据的插入顺序，遍历时，先得到的数据便是先插入的，遍历速度通常情况下比HashMap慢
                (2) Hashtable
                        原理：基于哈希表实现的，同样每个元素是一个key-value对，其内部也是通过单向链表解决冲突问题，容量不足（超过了阀值）时，同样会自动增长
                        介绍：
                            1、无序
                            2、大部分方法是同步的（线程安全的、效率低）
                            3、不允许键或值为null
                            4、父类：Dictionary
                (3) TreeMap
                        原理：基于红黑树算法实现
                        介绍：
                            排序功能是其最大亮点。如果想按照自定义顺序或者自然顺序存储数据，TreeMap是一个最好的选择。
                            TreeMap是有序的，通过Comparator接口（重写compare(T o1, T o2)方法）我们可以对TreeMap的内部排序进行精密的控制。
                            TreeMap implements NavigableMap extends SortedMap extends Map
            其它：
                (1) Hashtable和HashMap的区别
                    1）继承的父类不同：Hashtable继承自Dictionary类，而HashMap继承自AbstractMap类。但二者都实现了Map接口。
                    2）线程安全性不同：Hashtable中的方法是同步的，在多线程并发的环境下，可以直接使用Hashtable，不需要自己为它的方法实现同步，但使用HashMap时就必须要自己增加同步处理。
                    3) key和value是否允许null值：Hashtable中不允许键或值为null，而HashMap允许键或值为null
                        - 在Hashtable中有类似put(null,null)的操作，编译是同样可以通过的，因为key和value都是Object类型，但运行时会抛出NullPointerException异常，这是JDK的规范规定的。
                        - 在HashMap中不能由get()方法来判断HashMap中是否存在某个键，而应该用containsKey()方法来判断。
                            -- 因为当get()方法返回null值时，可能是HashMap中没有该键，也可能是该键所对应的值为null。
                    4）hash值不同：哈希值的使用不同，Hashtable直接使用对象的hashCode。而HashMap重新计算hash值。
                    5）两个遍历方式的内部实现上不同：Hashtable、HashMap都使用了Iterator。而由于历史原因，Hashtable还使用了Enumeration的方式。
                    6）内部实现使用的数组初始化和扩容方式不同：
                        - Hashtable在不指定容量的情况下的默认容量为11，而HashMap为16，Hashtable不要求底层数组的容量一定要为2的整数次幂，而HashMap则要求一定为2的整数次幂。
                        - Hashtable扩容时，将容量变为原来的2倍加1，而HashMap扩容时，将容量变为原来的2倍。
                        - Hashtable和HashMap它们两个内部实现方式的数组的初始大小和扩容的方式。HashTable中hash数组默认大小是11，增加的方式是 old*2+1。
                    7）是否提供contains方法
                        - HashMap把Hashtable的contains方法去掉了，改成containsValue和containsKey，因为contains方法容易让人引起误解。
                        - Hashtable则保留了contains，containsValue和containsKey三个方法，其中contains和containsValue功能相同。
                (2) 什么时候使用LinkedHashMap、ConcurrentHashMap、WeakHashMap
                
    9、相关数据结构
        1、数组
        2、链表
            1）单向链表
            2）双向链表
            其它：
                1）为何链表的检索会较慢？
        3、二叉树
            1）排序二叉树
            2）红黑二叉树
                红黑二叉树（又称红黑树），它首先是一颗二叉树，它具有二叉树所有的特性。
                红黑树顾名思义就是节点是红色或者黑色的平衡二叉树，它通过颜色的约束来维持着二叉树的平衡。对于一棵有效的红黑树而言我们必须增加如下规则：
                    - 每个节点都只能是红色或者黑色
                    - 根节点是黑色
                    - 每个叶节点（NIL节点即空节点）是黑色的
                    - 如果一个结点是红的，则它两个子节点都是黑的。也就是说在一条路径上不能出现相邻的两个红色结点
                    - 从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点
                对于红黑树而言它主要包括三大基本操作：左旋、右旋、着色。
    10、java的IO

    20、其它
        (1) 能否在static环境中访问访问非static变量？
            不能。static变量是属于类的。当类被虚拟机载入时，会对static变量进行初始化。非static变量是属于实例的，这个时候实例还没有被创建，编译器会报错
        (2) static关键字什么意思？java中是否可以覆盖一个private或者是static的方法？
            static表明一个成员变量或者是成员方法可以在没有所属类的实例变量的情况下访问。
            java中static方法不能被覆盖，因为方法覆盖是基于运行时动态绑定的，而static方法是编译时静态绑定的。static方法与类的任何实例都不相关。
            java中不可以覆盖private方法。因为private修饰的变量和方法只能在当前类中使用，如果是其他类继承当前类，继承类中是不能访问到private变量和方法的

java多线程：
    1、java线程生命周期有哪些
        (1) New          （初始化状态）
            当程序使用new关键字创建了一个线程之后，该线程就处于初始化状态，此时的线程情况如下：
              1）此时JVM为其分配内存，并初始化其成员变量的值
              2）此时线程对象没有表现出任何线程的动态特征，程序也不会执行线程的线程执行体
        (2) Runnable     （可运行/运行状态）
            当线程对象调用了start()方法之后，该线程处于就绪状态，此时的线程情况如下：
              1）此时JVM会为其创建方法去调用栈和程序计数器
              2）该状态的线程处于线程就绪队列中（尽管是采用队列形式，事实上把它称为可运行池而不是可运行队列。因为CPU的调度不一定是按照先进先出的顺序来调度的），线程并没有开始运行
              3）此时线程等待系统为其分配CPU时间片，并不是说执行了start()方法就立即执行
        (3) Blocked      （阻塞状态）
            只有一种情况会导致线程阻塞，就是synchronized，我们知道被synchronized修饰的方法或者代码块同一时刻只能有一个线程执行，
            而其他竞争锁的线程就从Runnable到了Blocked状态，当某个线程竞争到锁了它就变成了Runnable状态。
        (4) Waiting      （无时间限制的等待状态）
            有三种情况会使得Runnable状态到Waiting状态，一旦唤醒后就会回到Runnable状态
              1）调用无参的Object.wait()方法。等到notify()或者notifyAll()唤醒就会回到Runnable状态。
              2）调用无参的Thread.join()方法。主线程里启动了一个线程t1，调用t1.join()，这时你的主线程需要等t1执行完了才会继续执行，这时你的主线程就是Waiting状态。
              3）调用LockSupport.park()方法。LockSupport是Java6引入的一个工具类，Java并发包中的锁都是基于它实现的，再调用LockSupport.unpark(Thread thread)，就会回到Runnable状态。
        (5) Timed_Waiting（有时间限制的等待状态）
            有五种情况会使得Runnable状态到Timed_Waiting状态，一旦唤醒或超时后就会回到Runnable状态
              1）Object.wait(long timeout)，注意 Object.wait(long timeout, int nanos) ---（当nanos > 0，timeout++）
              2）Thread.join(long millis)，注意 Thread.join(long millis, int nanos) ---（当nanos >= 500000 || (nanos != 0 && millis == 0)，millis++）
                 (******)Thread.join(long millis)底层是通过调用native方法：wait(long timeout)来实现join的功能的
              3）Thread.sleep(long millis)，注意 Thread.sleep(long millis, int nanos)内部调用的其实也是Thread.sleep(long millis)
              4）LockSupport.parkNanos(Object blocked, long deadline)
              5）LockSupport.parkUntil(long deadline)
        (6) Terminated   （终止状态）
              1）线程正常run结束之后或者run中途出现异常了就变成终止状态
              2）Thread.stop()是让线程终止的，但是此方法已经被废弃（@Deprecated）了，不推荐使用。
                 因为比如你这个线程得到了锁，你stop了之后这个锁也随着没了，其它线程就都拿不到这个锁了！这不玩完了么！所以推荐使用interrupt()方法。
    2、join()：
        等待线程执行终止之后，继续执行本线程的内容（join不是static方法，本质是调用wait方法来实现），可以使用CountDownLatch也可以达到相同效果。
    3、wait()：
    	(1) wait()方法不带参：
    	    释放锁。线程进入到无限期的等待状态，Runnable -> Waiting状态，需要其它线程调用此锁对象的notify()方法或notifyAll()方法后方可唤醒即回到Runnable状态。
    	    使用wait()需要在synchronized里执行（ synchronized (Object) { Object.wait(); }  ）
    	(2) wait(5000)方法带参：
    	    在等待期间释放锁资源。线程进入到有限期的等待状态，Runnable -> Timed_Waiting状态，在等待期间需要notify()或notifyAll()唤醒或者超时后自动回到Runnable状态。
    4、sleep(1000)：
        不释放锁。sleep方法只有有参方法，线程进入到有限期的等待状态，Runnable -> Timed_Waiting状态。
        有个疑问：
            当在main线程中调用其它线程（如：t1线程）的sleep方法时，会使main线程自己进入到Timed_Waiting状态，而不清楚是否影响到t1线程。
            查看sleep方法也没有发现是调用当前线程的，所以没懂为什么main会进入Time_Waiting状态。
    5、yield()：
        不释放锁。放弃本次cpu时间片并进入Runnable状态。
    6、notify()：方法的作用是唤醒某个线程，但不能唤醒某个具体的线程。
    7、notifyAll()：唤醒所有线程并允许它们争夺锁，确保了至少有一个线程能继续运行，这样会造成锁竞争问题。
    8、interrupt()、interrupted()、isInterrupted()、isInterrupted(boolean ClearInterrupted)
        (1) interrupt()
              把线程的中断标记设置为：true，不会主动将线程中断，只是打个标记而已。（底层实现：实际是调用了native方法：interrupt0）
              注意：
                  若在线程t1中调用t2.interrupt()，此时t2线程中若有join、wait、sleep的地方正处于等待状态，那么就会抛出InterruptedException异常（相当于打断了t2线程的等待状态）
                  实际上：t2线程在执行join、wait、sleep方法前的中断状态（isInterrupted()）为true的话，那么在即将执行的join、wait、sleep方法时就会抛出中断异常。
        (2) interrupted() --- 静态方法
              先返回当前线程是否有中断标记（有中断标记则返回true），再清除中断标记（设置为false）
              注意：此方法只是针对当前的线程，所以可以直接用Thread.interrupted()的方式调用就可以了，因为此静态方法里写的是return currentThread().isInterrupted(true); 
        (3) isInterrupted()无参：
              只返回线程是否有中断标记（有中断标记则返回true，没有则返回false）
        (4) isInterrupted(boolean ClearInterrupted)有参：
              本地native方法：private native boolean isInterrupted(boolean ClearInterrupted);
        注意：
            * t1线程去中断t2线程（ t2.interrupt() ），如果t2线程（t1为被中断线程）里有join、wait、sleep处在正在等待的状态，则会抛出InterruptedException异常
            * 抛出异常后，中断标记的值变为false
            * 一定是出现了中断标记的变化才会抛出InterruptedException异常，异常的位置还一定是在join、wait、sleep等这样带有Waiting的地方
    9、volatile关键字
    10、为什么wait、notify 和 notifyAll这些方法不在thread类里面？
        一个很明显的原因是JAVA提供的锁是对象级的而不是线程级的，每个对象都有锁。
        wait，notify和notifyAll都是锁级别的操作，所以把他们定义在Object类中因为锁属于对象。
    11、多线程同步的实现方法有哪些
        (1) synchronized 关键字
        (2) wait()方法与notify()方法
        (3) Lock
    12、sleep()方法与wait()方法有什么区别
        (1) sleep()是属于Thread的静态方法；wait()是属于Object中的成员方法
        (2) sleep()方法不会释放已持有的锁并进入Timed_Waiting状态；wait()方法会释放已持有的锁并进入到Wating状态
        (3) wait()方法生效后线程进入到Wating状态，唤醒是需要在其它线程中通过锁对象去调用notify()或者notifyAll()方法实现的
    13、实现线程的方式有哪些
        (1) 继承Thread类，重写run()方法，启动线程start()方法，（ public class Thread implements Runnable {...} ）
        (2) 实现Runnable接口，重写run()方法，new Thread(new Runnable(){...}).start();
        (3) 实现Callable<泛型>接口，重写call()方法，返回值是泛型，通过FutureTask包裹一层后再作为参数传入new Thread(ft).start();
            优点：实现Callable有返回值（可以拿到线程运行后返回值）
            特点：
                支持Future模式（可以达到一个异步阻塞的查询结果的效果）：数据是异步提交到后台，线程后台去计算，也可以主动去获取结果( ft.get() )，若线程没执行完则会阻塞直到线程执行完。
                “数据提交给你，你先算，我需要的时候再问你要，我要的时候你没算完，那我就等着（阻塞）”，需要借助FutureTask类来实现线程的启动。
            举例：
                public class CallableAndFuture {
                    public static class CallableTest implements Callable<String> {
                        @Override
                        public String call() throws Exception {
                            System.out.println(Thread.currentThread().getName()+" >> start ...");
                            Thread.sleep(5000);
                            System.out.println(Thread.currentThread().getName()+" >> run over !");
                            return "Hello World";
                        }
                    }
                    public static void main(String[] args) {
                        FutureTask futureTask = new FutureTask(new CallableTest());
                        new Thread(futureTask, "t1").start();
                        // 线程池方式创建线程：
                        // ExecutorService threadPool = Executors.newSingleThreadExecutor();
                        // Future<String> futureTask = threadPool.submit(new CallableTest());
                        try {
                            // 等待t1线程结束，并获取返回结果（等待期间当前main线程会阻塞，直到call()方法结束并返回结果）
                            System.out.println( futureTask.get() );
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        } catch (ExecutionException e) {
                            e.printStackTrace();
                        }
                    }
                }
        (4) 通过线程池
        (5) Callable 与 Runnable接口的区别
             1）Callable可以在任务结束后提供一个返回值，Runnable无法提供这个功能。
             2）Callable中的call()方法可以抛出异常，而Runnable的run()方法不能抛出异常。
             3）使用Callable方式可以拿到一个Future接口的实现类对象，此对象表示异步计算的结果，它提供了检查线程是否完成的方法。
                由于线程属于异步计算模型，因此无法从别的线程中得到方法的返回值，在这种情况下，就可以使用此对象来监视目标线程调用call()方法的情况，
                当调用Future的get()方法以获取结果时，当前线程就会阻塞，直到call()方法执行结果并返回结果。
    其他：
        (1) 死锁：
                概念：多个并发线程因争夺资源而产生相互等待的现象。
                原理：当一组线程中的每个线程都在等待某个事件发生，而只有这组线程中的其它线程才能触发该事件，这就称这组线程发生了死锁。
                本质原因：
                    1）系统资源有限。
                    2）线程推进顺序不合理。
                死锁产生的4个必要条件：
                    1）互斥：某种资源一次只允许一个线程访问，即该资源一旦分配给某个线程，其他线程就不能再访问，直到该线程访问结束。
                    2）占有且等待：一个线程本身占有资源（一种或多种），同时还有资源未得到满足，正在等待其他线程释放该资源。
                    3）不可抢占：别人已经占有了某项资源，你不能因为自己也需要该资源，就去把别人的资源抢过来。
                    4）循环等待：存在一个线程链，使得每个线程都占有下一个线程所需的至少一种资源。
                    当以上四个条件均满足，必然会造成死锁，发生死锁的线程无法进行下去，它们所持有的资源也无法释放。
                    这样会导致CPU的吞吐量下降。所以死锁情况是会浪费系统资源和影响计算机的使用性能。
                举例：
                    public static void main(String[] args) {
                        Object A = new Object();
                        Object B = new Object();
                        Object C = new Object();
                        new Thread(new Runnable() {
                            @Override
                            public void run() {
                                synchronized (A) {
                                    System.out.println("t1 get lock A ");
                                    try {
                                        Thread.sleep(2000);
                                    } catch (InterruptedException e) {
                                        e.printStackTrace();
                                    }
                                    synchronized (B) {
                                        System.out.println("t1 get lock B");
                                    }
                                }
                            }
                        }, "t1").start();
                        new Thread(new Runnable() {
                            @Override
                            public void run() {
                                synchronized (B) {
                                    System.out.println("t2 get lock B ");
                                    try {
                                        Thread.sleep(1000);
                                    } catch (InterruptedException e) {
                                        e.printStackTrace();
                                    }
                                    synchronized (C) {
                                        System.out.println("t2 get lock C");
                                    }
                                }
                            }
                        }, "t2").start();
                        new Thread(new Runnable() {
                            @Override
                            public void run() {
                                synchronized (C) {
                                    System.out.println("t3 get lock C ");
                                    try {
                                        Thread.sleep(1000);
                                    } catch (InterruptedException e) {
                                        e.printStackTrace();
                                    }
                                    synchronized (A) {
                                        System.out.println("t3 get lock A");
                                    }
                                }
                            }
                        }, "t3").start();
                    }

Spring：
    1、ioc
    2、aop
    3、spring mvc

SpringBoot：
    1、启动原理
    2、各种启动器
    3

SpringCloud：
    1、Spring Cloud Config
    2、Eureka
    3、Histrix
    4、Feign
    5、路由：zuul
    6、

消息中间件：
    1、RabbitMq
    2、RocketMq
    3、Kafaka

缓存：
    1、redis
        (1) 常用数据类型
        (2) 发布订阅
    2、MemCache

数据库相关：
    1、索引的作用
    2、数据库调优

设计模式：
    1、策略模式
        适用场景：

    2、单例模式
        原理：
        适用场景：
        手写一个单例模式的实现：

    3、装饰模式
    4、工厂模式

Docker容器：
    1、什么是docker，它能解决什么问题？

前端：
    1、Vue2.0
    2、Jquery
    3、js
    4、BootStrap
    5、Ajax
    6、Layer

其它：
    1、数据库调优
    2、数据库的索引、约束的作用
    3、对于restful
        1、什么是restful架构，restful 与 rest 有什么区别？
        2、什么时候用get请求，什么用post请求，还是说任意的？
        3、方法命名要遵循什么规律吗？
        4、rest规范是什么？
    4、Spring有哪些特点（如：IOC）、SpringBoot相关知识
    5、过滤器、拦截器、监听器的区别
    6、微服务架构相关知识点
    7、为什么要数据库方言，数据库方言是什么？
    8、token、session、cookie的区别
    9、http、https、websocket、webservice(SOAP)、加密算法、消息签名
    10、Redis可以有哪些作用？
    11、多线程 & 并发编程 & 网络编程 & JVM
    12、设计模式
    13、Shiro原理及用法
    14、netty：channel、socket、
    15、模板引擎的原理
    16、网络的七层参考模型
    17、读写分离是什么？
    18、精通分布式系统开发，什么是分布式系统？